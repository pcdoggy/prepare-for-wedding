#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace prepare_for_wedding.cls
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="prepare for wedding")]
	public partial class prepare_for_weddingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void Inserttb婚礼信息(tb婚礼信息 instance);
    partial void Updatetb婚礼信息(tb婚礼信息 instance);
    partial void Deletetb婚礼信息(tb婚礼信息 instance);
    partial void Inserttb祝福(tb祝福 instance);
    partial void Updatetb祝福(tb祝福 instance);
    partial void Deletetb祝福(tb祝福 instance);
    partial void Inserttb捧场人员信息(tb捧场人员信息 instance);
    partial void Updatetb捧场人员信息(tb捧场人员信息 instance);
    partial void Deletetb捧场人员信息(tb捧场人员信息 instance);
    partial void Inserttb评论(tb评论 instance);
    partial void Updatetb评论(tb评论 instance);
    partial void Deletetb评论(tb评论 instance);
    #endregion
		
		public prepare_for_weddingDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["prepare_for_weddingConnectionString2"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public prepare_for_weddingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public prepare_for_weddingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public prepare_for_weddingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public prepare_for_weddingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tb婚礼信息> tb婚礼信息
		{
			get
			{
				return this.GetTable<tb婚礼信息>();
			}
		}
		
		public System.Data.Linq.Table<tb祝福> tb祝福
		{
			get
			{
				return this.GetTable<tb祝福>();
			}
		}
		
		public System.Data.Linq.Table<tb捧场人员信息> tb捧场人员信息
		{
			get
			{
				return this.GetTable<tb捧场人员信息>();
			}
		}
		
		public System.Data.Linq.Table<tb评论> tb评论
		{
			get
			{
				return this.GetTable<tb评论>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb婚礼信息")]
	public partial class tb婚礼信息 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iid;
		
		private System.Data.Linq.Binary _rowver;
		
		private System.DateTime _createtime;
		
		private string _bridegroom;
		
		private string _bride;
		
		private System.DateTime _dateofmarriage;
		
		private string _lovestroy;
		
		private string _address;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniidChanging(int value);
    partial void OniidChanged();
    partial void OnrowverChanging(System.Data.Linq.Binary value);
    partial void OnrowverChanged();
    partial void OncreatetimeChanging(System.DateTime value);
    partial void OncreatetimeChanged();
    partial void OnbridegroomChanging(string value);
    partial void OnbridegroomChanged();
    partial void OnbrideChanging(string value);
    partial void OnbrideChanged();
    partial void OndateofmarriageChanging(System.DateTime value);
    partial void OndateofmarriageChanged();
    partial void OnlovestroyChanging(string value);
    partial void OnlovestroyChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    #endregion
		
		public tb婚礼信息()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int iid
		{
			get
			{
				return this._iid;
			}
			set
			{
				if ((this._iid != value))
				{
					this.OniidChanging(value);
					this.SendPropertyChanging();
					this._iid = value;
					this.SendPropertyChanged("iid");
					this.OniidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowver", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary rowver
		{
			get
			{
				return this._rowver;
			}
			set
			{
				if ((this._rowver != value))
				{
					this.OnrowverChanging(value);
					this.SendPropertyChanging();
					this._rowver = value;
					this.SendPropertyChanged("rowver");
					this.OnrowverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createtime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime createtime
		{
			get
			{
				return this._createtime;
			}
			set
			{
				if ((this._createtime != value))
				{
					this.OncreatetimeChanging(value);
					this.SendPropertyChanging();
					this._createtime = value;
					this.SendPropertyChanged("createtime");
					this.OncreatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bridegroom", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string bridegroom
		{
			get
			{
				return this._bridegroom;
			}
			set
			{
				if ((this._bridegroom != value))
				{
					this.OnbridegroomChanging(value);
					this.SendPropertyChanging();
					this._bridegroom = value;
					this.SendPropertyChanged("bridegroom");
					this.OnbridegroomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bride", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string bride
		{
			get
			{
				return this._bride;
			}
			set
			{
				if ((this._bride != value))
				{
					this.OnbrideChanging(value);
					this.SendPropertyChanging();
					this._bride = value;
					this.SendPropertyChanged("bride");
					this.OnbrideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateofmarriage", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime dateofmarriage
		{
			get
			{
				return this._dateofmarriage;
			}
			set
			{
				if ((this._dateofmarriage != value))
				{
					this.OndateofmarriageChanging(value);
					this.SendPropertyChanging();
					this._dateofmarriage = value;
					this.SendPropertyChanged("dateofmarriage");
					this.OndateofmarriageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lovestroy", DbType="NVarChar(500)", UpdateCheck=UpdateCheck.Never)]
		public string lovestroy
		{
			get
			{
				return this._lovestroy;
			}
			set
			{
				if ((this._lovestroy != value))
				{
					this.OnlovestroyChanging(value);
					this.SendPropertyChanging();
					this._lovestroy = value;
					this.SendPropertyChanged("lovestroy");
					this.OnlovestroyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb祝福")]
	public partial class tb祝福 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iid;
		
		private System.Data.Linq.Binary _rowver;
		
		private System.DateTime _createtime;
		
		private int _婚礼iid;
		
		private string _祝福人;
		
		private string _祝福内容;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniidChanging(int value);
    partial void OniidChanged();
    partial void OnrowverChanging(System.Data.Linq.Binary value);
    partial void OnrowverChanged();
    partial void OncreatetimeChanging(System.DateTime value);
    partial void OncreatetimeChanged();
    partial void On婚礼iidChanging(int value);
    partial void On婚礼iidChanged();
    partial void On祝福人Changing(string value);
    partial void On祝福人Changed();
    partial void On祝福内容Changing(string value);
    partial void On祝福内容Changed();
    #endregion
		
		public tb祝福()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int iid
		{
			get
			{
				return this._iid;
			}
			set
			{
				if ((this._iid != value))
				{
					this.OniidChanging(value);
					this.SendPropertyChanging();
					this._iid = value;
					this.SendPropertyChanged("iid");
					this.OniidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowver", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary rowver
		{
			get
			{
				return this._rowver;
			}
			set
			{
				if ((this._rowver != value))
				{
					this.OnrowverChanging(value);
					this.SendPropertyChanging();
					this._rowver = value;
					this.SendPropertyChanged("rowver");
					this.OnrowverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createtime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime createtime
		{
			get
			{
				return this._createtime;
			}
			set
			{
				if ((this._createtime != value))
				{
					this.OncreatetimeChanging(value);
					this.SendPropertyChanging();
					this._createtime = value;
					this.SendPropertyChanged("createtime");
					this.OncreatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_婚礼iid", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int 婚礼iid
		{
			get
			{
				return this._婚礼iid;
			}
			set
			{
				if ((this._婚礼iid != value))
				{
					this.On婚礼iidChanging(value);
					this.SendPropertyChanging();
					this._婚礼iid = value;
					this.SendPropertyChanged("婚礼iid");
					this.On婚礼iidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_祝福人", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string 祝福人
		{
			get
			{
				return this._祝福人;
			}
			set
			{
				if ((this._祝福人 != value))
				{
					this.On祝福人Changing(value);
					this.SendPropertyChanging();
					this._祝福人 = value;
					this.SendPropertyChanged("祝福人");
					this.On祝福人Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_祝福内容", DbType="NVarChar(300)", UpdateCheck=UpdateCheck.Never)]
		public string 祝福内容
		{
			get
			{
				return this._祝福内容;
			}
			set
			{
				if ((this._祝福内容 != value))
				{
					this.On祝福内容Changing(value);
					this.SendPropertyChanging();
					this._祝福内容 = value;
					this.SendPropertyChanged("祝福内容");
					this.On祝福内容Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb捧场人员信息")]
	public partial class tb捧场人员信息 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iid;
		
		private System.Data.Linq.Binary _rowver;
		
		private System.DateTime _createtime;
		
		private int _婚礼iid;
		
		private string _姓名;
		
		private string _电话;
		
		private string _邮箱;
		
		private string _附言;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniidChanging(int value);
    partial void OniidChanged();
    partial void OnrowverChanging(System.Data.Linq.Binary value);
    partial void OnrowverChanged();
    partial void OncreatetimeChanging(System.DateTime value);
    partial void OncreatetimeChanged();
    partial void On婚礼iidChanging(int value);
    partial void On婚礼iidChanged();
    partial void On姓名Changing(string value);
    partial void On姓名Changed();
    partial void On电话Changing(string value);
    partial void On电话Changed();
    partial void On邮箱Changing(string value);
    partial void On邮箱Changed();
    partial void On附言Changing(string value);
    partial void On附言Changed();
    #endregion
		
		public tb捧场人员信息()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int iid
		{
			get
			{
				return this._iid;
			}
			set
			{
				if ((this._iid != value))
				{
					this.OniidChanging(value);
					this.SendPropertyChanging();
					this._iid = value;
					this.SendPropertyChanged("iid");
					this.OniidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowver", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary rowver
		{
			get
			{
				return this._rowver;
			}
			set
			{
				if ((this._rowver != value))
				{
					this.OnrowverChanging(value);
					this.SendPropertyChanging();
					this._rowver = value;
					this.SendPropertyChanged("rowver");
					this.OnrowverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createtime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime createtime
		{
			get
			{
				return this._createtime;
			}
			set
			{
				if ((this._createtime != value))
				{
					this.OncreatetimeChanging(value);
					this.SendPropertyChanging();
					this._createtime = value;
					this.SendPropertyChanged("createtime");
					this.OncreatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_婚礼iid", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int 婚礼iid
		{
			get
			{
				return this._婚礼iid;
			}
			set
			{
				if ((this._婚礼iid != value))
				{
					this.On婚礼iidChanging(value);
					this.SendPropertyChanging();
					this._婚礼iid = value;
					this.SendPropertyChanged("婚礼iid");
					this.On婚礼iidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_姓名", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string 姓名
		{
			get
			{
				return this._姓名;
			}
			set
			{
				if ((this._姓名 != value))
				{
					this.On姓名Changing(value);
					this.SendPropertyChanging();
					this._姓名 = value;
					this.SendPropertyChanged("姓名");
					this.On姓名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_电话", DbType="NVarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string 电话
		{
			get
			{
				return this._电话;
			}
			set
			{
				if ((this._电话 != value))
				{
					this.On电话Changing(value);
					this.SendPropertyChanging();
					this._电话 = value;
					this.SendPropertyChanged("电话");
					this.On电话Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_邮箱", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string 邮箱
		{
			get
			{
				return this._邮箱;
			}
			set
			{
				if ((this._邮箱 != value))
				{
					this.On邮箱Changing(value);
					this.SendPropertyChanging();
					this._邮箱 = value;
					this.SendPropertyChanged("邮箱");
					this.On邮箱Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_附言", DbType="NVarChar(300)", UpdateCheck=UpdateCheck.Never)]
		public string 附言
		{
			get
			{
				return this._附言;
			}
			set
			{
				if ((this._附言 != value))
				{
					this.On附言Changing(value);
					this.SendPropertyChanging();
					this._附言 = value;
					this.SendPropertyChanged("附言");
					this.On附言Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb评论")]
	public partial class tb评论 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iid;
		
		private System.Data.Linq.Binary _rowver;
		
		private System.DateTime _createtime;
		
		private int _祝福iid;
		
		private string _评论人;
		
		private string _评论内容;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniidChanging(int value);
    partial void OniidChanged();
    partial void OnrowverChanging(System.Data.Linq.Binary value);
    partial void OnrowverChanged();
    partial void OncreatetimeChanging(System.DateTime value);
    partial void OncreatetimeChanged();
    partial void On祝福iidChanging(int value);
    partial void On祝福iidChanged();
    partial void On评论人Changing(string value);
    partial void On评论人Changed();
    partial void On评论内容Changing(string value);
    partial void On评论内容Changed();
    #endregion
		
		public tb评论()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int iid
		{
			get
			{
				return this._iid;
			}
			set
			{
				if ((this._iid != value))
				{
					this.OniidChanging(value);
					this.SendPropertyChanging();
					this._iid = value;
					this.SendPropertyChanged("iid");
					this.OniidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rowver", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary rowver
		{
			get
			{
				return this._rowver;
			}
			set
			{
				if ((this._rowver != value))
				{
					this.OnrowverChanging(value);
					this.SendPropertyChanging();
					this._rowver = value;
					this.SendPropertyChanged("rowver");
					this.OnrowverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createtime", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime createtime
		{
			get
			{
				return this._createtime;
			}
			set
			{
				if ((this._createtime != value))
				{
					this.OncreatetimeChanging(value);
					this.SendPropertyChanging();
					this._createtime = value;
					this.SendPropertyChanged("createtime");
					this.OncreatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_祝福iid", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int 祝福iid
		{
			get
			{
				return this._祝福iid;
			}
			set
			{
				if ((this._祝福iid != value))
				{
					this.On祝福iidChanging(value);
					this.SendPropertyChanging();
					this._祝福iid = value;
					this.SendPropertyChanged("祝福iid");
					this.On祝福iidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_评论人", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string 评论人
		{
			get
			{
				return this._评论人;
			}
			set
			{
				if ((this._评论人 != value))
				{
					this.On评论人Changing(value);
					this.SendPropertyChanging();
					this._评论人 = value;
					this.SendPropertyChanged("评论人");
					this.On评论人Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_评论内容", DbType="NVarChar(300)", UpdateCheck=UpdateCheck.Never)]
		public string 评论内容
		{
			get
			{
				return this._评论内容;
			}
			set
			{
				if ((this._评论内容 != value))
				{
					this.On评论内容Changing(value);
					this.SendPropertyChanging();
					this._评论内容 = value;
					this.SendPropertyChanged("评论内容");
					this.On评论内容Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
